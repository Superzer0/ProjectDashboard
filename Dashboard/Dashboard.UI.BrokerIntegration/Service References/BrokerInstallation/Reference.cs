//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dashboard.UI.BrokerIntegration.BrokerInstallation {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BrokerInstallation.IInstallPluginsService")]
    public interface IInstallPluginsService {
        
        // CODEGEN: Generating message contract since the wrapper name (ZippedPlugin) of message ZippedPlugin does not match the default value (InstallPlugin)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstallPluginsService/InstallPlugin", ReplyAction="http://tempuri.org/IInstallPluginsService/InstallPluginResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Dashboard.UI.BrokerIntegration.BrokerInstallation.InstallationResult InstallPlugin(Dashboard.UI.BrokerIntegration.BrokerInstallation.ZippedPlugin request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstallPluginsService/InstallPlugin", ReplyAction="http://tempuri.org/IInstallPluginsService/InstallPluginResponse")]
        System.Threading.Tasks.Task<Dashboard.UI.BrokerIntegration.BrokerInstallation.InstallationResult> InstallPluginAsync(Dashboard.UI.BrokerIntegration.BrokerInstallation.ZippedPlugin request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/Dashboard.Common")]
    public enum CommunicationType {
        
        /// <remarks/>
        Plain,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ZippedPlugin", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ZippedPlugin {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CheckSum;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public Dashboard.UI.BrokerIntegration.BrokerInstallation.CommunicationType CommunicationType;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string PluginId;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StartingProgram;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Version;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream Zip;
        
        public ZippedPlugin() {
        }
        
        public ZippedPlugin(string CheckSum, Dashboard.UI.BrokerIntegration.BrokerInstallation.CommunicationType CommunicationType, string Name, string PluginId, string StartingProgram, string Version, System.IO.Stream Zip) {
            this.CheckSum = CheckSum;
            this.CommunicationType = CommunicationType;
            this.Name = Name;
            this.PluginId = PluginId;
            this.StartingProgram = StartingProgram;
            this.Version = Version;
            this.Zip = Zip;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InstallationResult", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InstallationResult {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool Successful;
        
        public InstallationResult() {
        }
        
        public InstallationResult(bool Successful) {
            this.Successful = Successful;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInstallPluginsServiceChannel : Dashboard.UI.BrokerIntegration.BrokerInstallation.IInstallPluginsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InstallPluginsServiceClient : System.ServiceModel.ClientBase<Dashboard.UI.BrokerIntegration.BrokerInstallation.IInstallPluginsService>, Dashboard.UI.BrokerIntegration.BrokerInstallation.IInstallPluginsService {
        
        public InstallPluginsServiceClient() {
        }
        
        public InstallPluginsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InstallPluginsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InstallPluginsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InstallPluginsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Dashboard.UI.BrokerIntegration.BrokerInstallation.InstallationResult Dashboard.UI.BrokerIntegration.BrokerInstallation.IInstallPluginsService.InstallPlugin(Dashboard.UI.BrokerIntegration.BrokerInstallation.ZippedPlugin request) {
            return base.Channel.InstallPlugin(request);
        }
        
        public bool InstallPlugin(string CheckSum, Dashboard.UI.BrokerIntegration.BrokerInstallation.CommunicationType CommunicationType, string Name, string PluginId, string StartingProgram, string Version, System.IO.Stream Zip) {
            Dashboard.UI.BrokerIntegration.BrokerInstallation.ZippedPlugin inValue = new Dashboard.UI.BrokerIntegration.BrokerInstallation.ZippedPlugin();
            inValue.CheckSum = CheckSum;
            inValue.CommunicationType = CommunicationType;
            inValue.Name = Name;
            inValue.PluginId = PluginId;
            inValue.StartingProgram = StartingProgram;
            inValue.Version = Version;
            inValue.Zip = Zip;
            Dashboard.UI.BrokerIntegration.BrokerInstallation.InstallationResult retVal = ((Dashboard.UI.BrokerIntegration.BrokerInstallation.IInstallPluginsService)(this)).InstallPlugin(inValue);
            return retVal.Successful;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Dashboard.UI.BrokerIntegration.BrokerInstallation.InstallationResult> Dashboard.UI.BrokerIntegration.BrokerInstallation.IInstallPluginsService.InstallPluginAsync(Dashboard.UI.BrokerIntegration.BrokerInstallation.ZippedPlugin request) {
            return base.Channel.InstallPluginAsync(request);
        }
        
        public System.Threading.Tasks.Task<Dashboard.UI.BrokerIntegration.BrokerInstallation.InstallationResult> InstallPluginAsync(string CheckSum, Dashboard.UI.BrokerIntegration.BrokerInstallation.CommunicationType CommunicationType, string Name, string PluginId, string StartingProgram, string Version, System.IO.Stream Zip) {
            Dashboard.UI.BrokerIntegration.BrokerInstallation.ZippedPlugin inValue = new Dashboard.UI.BrokerIntegration.BrokerInstallation.ZippedPlugin();
            inValue.CheckSum = CheckSum;
            inValue.CommunicationType = CommunicationType;
            inValue.Name = Name;
            inValue.PluginId = PluginId;
            inValue.StartingProgram = StartingProgram;
            inValue.Version = Version;
            inValue.Zip = Zip;
            return ((Dashboard.UI.BrokerIntegration.BrokerInstallation.IInstallPluginsService)(this)).InstallPluginAsync(inValue);
        }
    }
}
